import pytest

from app.email_utils import EmailNotifier
from app.models import Document, Lead, User, EmailNotification


@pytest.fixture
def lead(db_session):
    # TODO: make factory so we don't have to create all these by hand
    resume = Document(
        original_filename='test.pdf',
        local_path='/test.pdf',
    )
    db_session.add(resume)
    db_session.flush()

    lead = Lead(
        first_name='test',
        last_name='test',
        email="prospect@example.com",
        resume=resume
    )
    db_session.add(lead)
    db_session.flush()

    return lead


@pytest.fixture
def lead_with_assignee(lead, db_session):
    user = User(email="attorney@example.com")
    db_session.add(user)
    db_session.flush()

    lead.assigned_to = user
    db_session.add(lead)
    db_session.flush()
    return lead


@pytest.fixture
def mock_db(mocker):
    return mocker.MagicMock()


class TestEmailNotifier:
    def test_send_new_lead_email_notification_with_no_assignee(
        self,
        mock_db,
        lead,
        mocker
    ):
        notifier = EmailNotifier(mock_db)

        mock_prospect_send = mocker.patch.object(notifier, '_send_new_lead_email_to_prospect')
        mock_attorney_send = mocker.patch.object(notifier, '_send_new_lead_email_to_attorney')
        mock_logger = mocker.patch('app.email_utils.logger')

        notifier.send_new_lead_email_notification(lead)

        mock_prospect_send.assert_called_once_with(lead=lead)
        mock_attorney_send.assert_not_called()
        mock_logger.warning.assert_called_once_with(
            f'No attorney was notified for new lead {lead.id}'
        )

    def test_send_new_lead_email_notification_with_assignee(
        self,
        mock_db,
        lead_with_assignee,
        mocker
    ):
        notifier = EmailNotifier(mock_db)

        mock_prospect_send = mocker.patch.object(notifier, '_send_new_lead_email_to_prospect')
        mock_attorney_send = mocker.patch.object(notifier, '_send_new_lead_email_to_attorney')
        mock_logger = mocker.patch('app.email_utils.logger')

        notifier.send_new_lead_email_notification(lead_with_assignee)

        mock_prospect_send.assert_called_once_with(lead=lead_with_assignee)
        mock_attorney_send.assert_called_once_with(lead=lead_with_assignee)
        mock_logger.warning.assert_not_called()

    def test_send_email(self):
        pass

    @pytest.mark.parametrize(
        'has_lead',
        (True, False)
    )
    def test_create_email_notification(
        self,
        db_session,
        lead,
        has_lead
    ):
        lead_to_use = lead if has_lead else None

        notifier = EmailNotifier(db_session)
        notification = notifier._create_email_notification(
            'subject',
            'body',
            'recipient@email.com',
            lead_to_use
        )
        db_session.flush()

        assert notification.subject == 'subject'
        assert notification.body == 'body'
        assert notification.recipient_email == 'recipient@email.com'
        assert notification.lead == lead_to_use
        # make sure it was persisted by checking that it has an autogenerated id
        assert notification.id is not None

    def test_send_new_lead_email_to_prospect(
        self,
        mock_db,
        lead,
        mocker
    ):
        notifier = EmailNotifier(mock_db)
        mock_send_email = mocker.patch.object(notifier, '_send_email')
        mock_create_notification = mocker.patch.object(notifier, '_create_email_notification')

        notifier._send_new_lead_email_to_prospect(lead)

        mock_send_email.assert_called_once_with(
            'Thanks for submitting!',
            "We'll be right with you",
            lead.email
        )
        mock_create_notification.assert_called_once_with(
            'Thanks for submitting!',
            "We'll be right with you",
            lead.email,
            lead
        )

    def test_send_new_lead_email_to_attorney(
        self,
        mock_db,
        lead_with_assignee,
        mocker
    ):
        notifier = EmailNotifier(mock_db)
        mock_send_email = mocker.patch.object(notifier, '_send_email')
        mock_create_notification = mocker.patch.object(notifier, '_create_email_notification')

        notifier._send_new_lead_email_to_attorney(lead_with_assignee)

        mock_send_email.assert_called_once_with(
            'Someone has submitted!',
            "Get to them ASAP",
            lead_with_assignee.assigned_to.email
        )
        mock_create_notification.assert_called_once_with(
            'Someone has submitted!',
            "Get to them ASAP",
            lead_with_assignee.assigned_to.email,
            lead_with_assignee
        )
